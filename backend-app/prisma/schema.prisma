datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String     @id @default(uuid())
  email                String     @unique
  password             String
  name                 String
  userType             UserType   @default(PERSON)
  firstName            String? 
  lastName             String? 
  cin                  String? 
  dateOfBirth          DateTime?
  gender               Gender? 
  companyName          String? 
  ice                  String? 
  logo                 String? 
  registrationNumber  String? 
  taxId                String?
  tradeRegister       String? 
  contactName          String? 
  contactPhoneNumber   String? 
  contactEmail         String? 
  address              String?
  phoneNumber          String?
  role                 UserRole   @default(USER)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  properties           Property[]
  tenants              Tenant[]
  contracts            Contract[]
  signature            String?   
}
model Property {
  id                   String             @id @default(uuid())
  propertyNumber       String             @unique
  propertyType         PropertyType
  name                 String
  address              String
  city                 String
  state                String
  zipCode              String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  tenantProperties     TenantProperties[]
  contracts            Contract[]
  userId               String?            
  user                 User?              @relation(fields: [userId], references: [id])
  images               PropertyImage[]    
}

model PropertyImage {
  id          String   @id @default(uuid())
  url         String   
  description String?  
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Tenant {
  id                   String              @id @default(uuid())
  tenantType           TenantType
  name                 String
  ice                  String             
  address              String
  email                String?
  contactName          String
  contactCin           String
  contactInfo          String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  tenantProperties     TenantProperties[]
  contracts            Contract[]
  userId               String?
  user                 User?                @relation(fields: [userId], references: [id])
}

model Contract {
  id                   String          @id @default(uuid())
  tenantId             String
  propertyId           String
  startDate            DateTime
  endDate              DateTime
  rentAmount           Float
  terms                String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  tenant               Tenant          @relation(fields: [tenantId], references: [id])
  property             Property        @relation(fields: [propertyId], references: [id])
  rentalPayments       RentalPayment[]
  userId               String?          
  user                 User?            @relation(fields: [userId], references: [id])
}

model TenantProperties {
  id         String   @id @default(uuid())
  tenantId   String
  propertyId String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}

model RentalPayment {
  id            String        @id @default(uuid())
  contractId    String
  dueDate       DateTime
  amountDue     Float
  amountPaid    Float
  paymentStatus PaymentStatus
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contract      Contract      @relation(fields: [contractId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  LATE
}

enum TenantType {
  ENTERPRISE
  PERSON
}

enum PropertyType {
  VILLA
  APARTMENT
  HOUSE
  STUDIO
  OFFICE
  GARAGE
  AUTRE
}

enum UserType {
  PERSON
  ENTERPRISE
}

enum Gender {
  HOMME
  FEMME
  AUTRE
}
